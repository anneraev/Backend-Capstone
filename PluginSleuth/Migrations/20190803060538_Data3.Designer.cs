// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PluginSleuth.Data;

namespace PluginSleuth.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190803060538_Data3")]
    partial class Data3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PluginSleuth.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarPath");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Github");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15400c7a-2e73-4efa-97f6-f954bdc9ac7e",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            IsAdmin = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEb7HplSm2YDRnMpfSJ0SMwDH4Vqa/vaGSiZ7UFZFnJgIUIXp23Qymcl/47Ewjda8w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "10000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7438404d-56e4-43e7-997a-ee9e05c2024b",
                            Email = "notadmin@notadmin.com",
                            EmailConfirmed = true,
                            IsAdmin = false,
                            LockoutEnabled = false,
                            Name = "notadmin",
                            NormalizedEmail = "NOTADMIN@NOTADMIN.COM",
                            NormalizedUserName = "NOTADMIN@NOTADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK33r3zy68yw8A3m3tZvpYP0Fb3yq9YFE2MSTRlVFMkDVpVs6AcP+WkO2P2Sfz7Ikg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "notadmin@notadmin.com"
                        });
                });

            modelBuilder.Entity("PluginSleuth.Models.Engine", b =>
                {
                    b.Property<int>("EngineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("BannerPath");

                    b.Property<string>("Language");

                    b.Property<string>("Link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("EngineId");

                    b.ToTable("Engines");

                    b.HasData(
                        new
                        {
                            EngineId = 1,
                            About = "With tools for managing database, a javascript code base, and the ability to deploy to Mac, PC, and Mobile! With RPG Maker MV, almost anyone (even a child) can make a game!",
                            Title = "RPG Maker MV"
                        },
                        new
                        {
                            EngineId = 2,
                            About = "Game Maker makes games!",
                            Title = "Game Maker"
                        });
                });

            modelBuilder.Entity("PluginSleuth.Models.Plugin", b =>
                {
                    b.Property<int>("PluginId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasMaxLength(255);

                    b.Property<int>("CommercialUse");

                    b.Property<int>("EngineId");

                    b.Property<bool>("Free");

                    b.Property<bool>("IsListed");

                    b.Property<int>("PluginTypeId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("Webpage");

                    b.HasKey("PluginId");

                    b.HasIndex("EngineId");

                    b.HasIndex("PluginTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Plugins");

                    b.HasData(
                        new
                        {
                            PluginId = 1,
                            About = "Controlled Turn Battle features turn-based battles where battlers act as soon as they have a command and actions affect turn order",
                            CommercialUse = 3,
                            EngineId = 1,
                            Free = false,
                            IsListed = true,
                            PluginTypeId = 1,
                            Title = "YEP Battle System - CTB",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            PluginId = 2,
                            About = "Modifiable menu plugin for flexible UI development.",
                            CommercialUse = 2,
                            EngineId = 1,
                            Free = false,
                            IsListed = true,
                            PluginTypeId = 2,
                            Title = "Mog Status Menu",
                            UserId = "10000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            PluginId = 3,
                            About = "Modifiable menu plugin for flexible UI development.",
                            CommercialUse = 1,
                            EngineId = 1,
                            Free = false,
                            IsListed = true,
                            PluginTypeId = 2,
                            Title = "Mog Save Menu",
                            UserId = "10000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            PluginId = 4,
                            About = "Allows the developer to set up skills with an area-of-effect target.",
                            CommercialUse = 1,
                            EngineId = 1,
                            Free = false,
                            IsListed = true,
                            PluginTypeId = 1,
                            Title = "Mog Area Target",
                            UserId = "10000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            PluginId = 5,
                            About = "Start menu plugin for Game Maker",
                            CommercialUse = 0,
                            EngineId = 2,
                            Free = false,
                            IsListed = true,
                            PluginTypeId = 2,
                            Title = "Game Maker Start Menu",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            PluginId = 6,
                            About = "This plugin is meant to be unlisted, and can only be viewed by its author or an admin.",
                            CommercialUse = 0,
                            EngineId = 2,
                            Free = false,
                            IsListed = false,
                            PluginTypeId = 2,
                            Title = "Anne's Unlisted Plugin",
                            UserId = "10000000-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("PluginSleuth.Models.PluginType", b =>
                {
                    b.Property<int>("PluginTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PluginTypeId");

                    b.ToTable("PluginTypes");

                    b.HasData(
                        new
                        {
                            PluginTypeId = 1,
                            Name = "Battle System"
                        },
                        new
                        {
                            PluginTypeId = 2,
                            Name = "Menu"
                        });
                });

            modelBuilder.Entity("PluginSleuth.Models.UserVersion", b =>
                {
                    b.Property<int>("UserVersionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<int>("VersionId");

                    b.HasKey("UserVersionId");

                    b.HasIndex("UserId");

                    b.HasIndex("VersionId");

                    b.ToTable("UserVersions");

                    b.HasData(
                        new
                        {
                            UserVersionId = 1,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            VersionId = 1
                        },
                        new
                        {
                            UserVersionId = 2,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            VersionId = 2
                        },
                        new
                        {
                            UserVersionId = 3,
                            UserId = "10000000-ffff-ffff-ffff-ffffffffffff",
                            VersionId = 4
                        },
                        new
                        {
                            UserVersionId = 4,
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            VersionId = 5
                        });
                });

            modelBuilder.Entity("PluginSleuth.Models.Version", b =>
                {
                    b.Property<int>("VersionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DownloadLink");

                    b.Property<int>("Iteration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("PluginId");

                    b.Property<string>("ReadMe");

                    b.HasKey("VersionId");

                    b.HasIndex("PluginId");

                    b.ToTable("Versions");

                    b.HasData(
                        new
                        {
                            VersionId = 1,
                            Iteration = 1,
                            Name = "1.1",
                            PluginId = 1
                        },
                        new
                        {
                            VersionId = 2,
                            Iteration = 2,
                            Name = "1.55",
                            PluginId = 1
                        },
                        new
                        {
                            VersionId = 3,
                            Iteration = 1,
                            Name = "0.2Beta",
                            PluginId = 2
                        },
                        new
                        {
                            VersionId = 4,
                            Iteration = 1,
                            Name = "Beta",
                            PluginId = 3
                        },
                        new
                        {
                            VersionId = 5,
                            Iteration = 2,
                            Name = "Final",
                            PluginId = 3
                        },
                        new
                        {
                            VersionId = 6,
                            Iteration = 1,
                            Name = "42",
                            PluginId = 4
                        },
                        new
                        {
                            VersionId = 7,
                            Iteration = 0,
                            Name = "Unlisted",
                            PluginId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PluginSleuth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PluginSleuth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PluginSleuth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PluginSleuth.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PluginSleuth.Models.Plugin", b =>
                {
                    b.HasOne("PluginSleuth.Models.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PluginSleuth.Models.PluginType", "PluginType")
                        .WithMany()
                        .HasForeignKey("PluginTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PluginSleuth.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PluginSleuth.Models.UserVersion", b =>
                {
                    b.HasOne("PluginSleuth.Models.ApplicationUser", "User")
                        .WithMany("UserVersions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PluginSleuth.Models.Version", "Version")
                        .WithMany("UserVersions")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PluginSleuth.Models.Version", b =>
                {
                    b.HasOne("PluginSleuth.Models.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
